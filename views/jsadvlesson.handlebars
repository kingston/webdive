<h1 class="title">JavaScript Deep Dive</h1>
<ol class="breadcrumb">
  <li><a href="/jslesson">JS Basics</a></li>
  <li class="active">JS Patterns</li>
</ol>
<div class="section">
  <h1 class="section-title">Javascript Design Patterns</h1>
  <p>Super-fast overview of more advanced concepts</p>
  <h2>Closures</h2>
  <div class="annotated-code">
    <pre class="prettyprint linenums">
function printName(name) {
  var text = 'Hello ' + name;
  var say = function() { alert(text); };
  return say;
}
var say2 = printName("Kingston");
say2();</pre>
    <div class="annotation" data-line="2">
      You declare a local variable up here.
    </div>
    <div class="annotation" data-line="3">
      This variable gets captured in the function (<em>say</em> now contains both the function and <em>text</em>.
    </div>
    <div class="annotation" data-line="7">
      Now, when <em>say2</em> is called, it will alert "Hello Kingston"
    </div>
  </div>
  <div class="panel panel-info">
    <div class="panel-heading">
      <h3 class="panel-title">Learn more about Closures</h3>
    </div>
    <div class="panel-body">
      Take a look at <a href="http://stackoverflow.com/a/111111">this StackOverflow answer</a>.
    </div>
  </div>
  <h2>Constructors</h2>
  <p>Create a function that will return a new object bound to <em>this</em></p>
  <pre class="prettyprint linenums">
function Task(task, assignee) {
  this.task = task;
  this.assignee = assignee;

  this.reassign = function(newAssignee) {
    this.assignee = newAssignee;
  };
  this.toString = function() {
    return this.task + " have to be done by " + this.assignee;
  };
}

var chores = new Task("Chores", "Sonny");

console.log(chores.toString()); // Chores have to be done by Sonny
chores.reassign("Mom");
console.log(chores.toString()); // Chores have to be done by Mom</pre>
  <h2>Prototypes</h2>
  <p>All objects created from that constructor have access to prototype functions.</p>
  <pre class="prettyprint linenums">
function Task(task, assignee) {
  this.task = task;
  this.assignee = assignee;
}

Task.prototype.reassign = function(newAssignee) {
  this.assignee = newAssignee;
};

Task.prototype.toString = function() {
  return this.task + " have to be done by " + this.assignee;
};

var chores = new Task("Chores", "Sonny");

console.log(chores.toString()); // Chores have to be done by Sonny
chores.reassign("Mom");
console.log(chores.toString()); // Chores have to be done by Mom</pre>
  <h2>Object Literals</h2>
  <p>Useful for separating out bits of functionality out (although it will create one shared instance vs. multiple instances)</p>
  <pre class="prettyprint linenums">
var databaseService = {
  url: "http://localhost:20719",
  databaseConnection: null,
  addEntry: function(entry) {
    ...
  },
  getEntry: function(id) {
    ...
  }
};</pre>
  <div class="panel panel-info">
    <div class="panel-heading">
      <h3 class="panel-title">Learn more about Design Patterns</h3>
    </div>
    <div class="panel-body">
      Take a look at <a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/">this Design Patterns guide</a>.
    </div>
  </div>
  <h2>All Done?</h2>
  <a href="/nodelesson" class="btn btn-primary">Continue</a>
</div>
