<h1 class="title">JavaScript Deep Dive</h1>
<ol class="breadcrumb">
  <li><a href="/jslesson">JS Basics</a></li>
  <li><a href="/jsadvlesson">JS Patterns</a></li>
  <li><a href="/nodelesson">Raw Node</a></li>
  <li class="active">Express.js</li>
</ol>
<div class="section">
  <h1 class="section-title">Express.js</h1>
  <h2>What is Express.js?</h2>
  <p>Express.js is a convenient framework that allows you to write web applications using Node.js a lot easier, e.g. with templates/routing/etc.</p>
  <div class="panel panel-info">
    <div class="panel-heading">
      <h3 class="panel-title">Creating an Express.js app</h3>
    </div>
    <div class="panel-body">
      <p>To create a new express.js application, it&apos;s pretty simple:</p>
      <p><code>express [[name of app]]</code></p>
      <p>and follow the instructions that it shows.  Note that Express defaults to using jade as the template rendering engine so views will look funny</p>
      <p>To change it to something different, take a look at <a href="https://github.com/ericf/express3-handlebars">express3-handlebars</a>, but probably want to check it out after this crash-course</a></p>
    </div>
  </div>
  
  <h2>A typical app.js file</h2>
  <div class="annotated-code">
    <pre class="prettyprint linenums">
/**
 * Module dependencies.
 */

var express = require('express');
var routes = require('./routes');
var user = require('./routes/user');
var http = require('http');
var path = require('path');

var app = express();

// all environments
app.set('port', process.env.PORT || 3000);
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');
app.use(express.favicon());
app.use(express.logger('dev'));
app.use(express.json());
app.use(express.urlencoded());
app.use(express.methodOverride());
app.use(app.router);
app.use(express.static(path.join(__dirname, 'public')));

// development only
if ('development' == app.get('env')) {
  app.use(express.errorHandler());
}

app.get('/', routes.index);
app.get('/users', user.list);

http.createServer(app).listen(app.get('port'), function(){
  console.log('Express server listening on port ' + app.get('port'));
});</pre>
    <div class="annotation" data-line="5">
As you can see, we are requiring all our modules at the start of file where we can access them like other variables.
    </div>
    <div class="annotation" data-line="11">
      Here&apos;s where we create our Express "application" that we will configure and run as our application.
    </div>
    <div class="annotation" data-line="14">
      Just setting the port number the server will run on. (3000 by default).
    </div>
    <div class="annotation" data-line="15">
      Set the folder where the views are.
    </div>
    <div class="annotation" data-line="16">
      Set the engine that will render our views.
    </div>
    <div class="annotation" data-line="17">
      These are "middleware" which will be covered below.
    </div>
    <div class="annotation" data-line="30">
      Here we set up the routes that will route requests coming into the server to a particular controller.
    </div>
    <div class="annotation" data-line="33">
      Just like before, we are creating a server using the http module, but instead of giving it a function, we give it <code>app</code> which will automatically handle the requests appropriately for us.
    </div>
  </div>
  <h2>Connect Middleware</h2>
  <p>You can think of middleware as layers that the requests go through to do various tasks.  The request is routed through the first layer, then the second, etc.  At each layer, the request can be handled right there and then, but otherwise it will keep on going.</p>
  <div class="annotated-code">
    <pre class="prettyprint linenums">
app.use(express.favicon());
app.use(express.logger('dev'));
app.use(express.json());
app.use(express.urlencoded());
app.use(express.methodOverride());
app.use(app.router);
app.use(express.static(path.join(__dirname, 'public')));

// development only
if ('development' == app.get('env')) {
  app.use(express.errorHandler());
}</pre>
    <div class="annotation" data-line="1">
      Intercepts favicon requests and returns the image directly.
    </div>
    <div class="annotation" data-line="2">
      Logs requests to the console.
    </div>
    <div class="annotation" data-line="3">
      Don&quot;t worry about all of them - they do various useful things like parsing JSON requests for you.
    </div>
    <div class="annotation" data-line="6">
      This is Express doing the controller routing for you.
    </div>
    <div class="annotation" data-line="7">
      And if it could not be routed, it will check your '/public' folder for files
    </div>
  </div>
  <div class="panel panel-info">
    <div class="panel-heading">
      <h3 class="panel-title">Sencha Connect</h3>
    </div>
    <div class="panel-body">
      <p>Express.js uses a set of middleware from the Sencha Connect framework, which you can read more about in the <a href="http://www.senchalabs.org/connect/">Connect documentation</a>.  It&apos;s great because it contains source code that is not too complicated.</p>
    </div>
  </div>

  <h2>All Done?</h2>
  <a href="/mongolesson" class="btn btn-primary">Continue</a>
</div>
