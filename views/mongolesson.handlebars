<h1 class="title">JavaScript Deep Dive</h1>
<ol class="breadcrumb">
  <li><a href="/jslesson">JS Basics</a></li>
  <li><a href="/jsadvlesson">JS Patterns</a></li>
  <li><a href="/nodelesson">Raw Node</a></li>
  <li><a href="/expresslesson">Express.js</a></li>
  <li class="active">MongoDB</li>
</ol>
<div class="section">
  <h1 class="section-title">MongoDB</h1>

  <h2>What is MongoDB?</h2>
  <p><a href="http://www.mongodb.org/">MongoDB</a> is a database that stores JSON-style documents in lists called "collections"</p>
  <h3>Example Document</h3>
  <p>So for example, we may want to store a list of pet velociraptors in our dinosaur database so we would have an entry as follows:</p>
  <div class="annotated-code">
    <pre class="prettyprint linenums">
{
  name: "Bob",
  height: 5.11,
  status: "alive",
  interests: ["hunting people", "featuring in XKCD", "cake"]
}</pre>
    <div class="annotation" data-line="2">
      It&apos;s just like a normal JSON object with fields and values
    </div>
    <div class="annotation" data-line="5">
      It can contain any type of normal variables including arrays, doubles, and strings.
    </div>
  </div>

  <div class="panel panel-info">
    <div class="panel-heading">
      <h3 class="panel-title">More MongoDB</h3>
    </div>
    <div class="panel-body">
      <p>If you want a deeper understanding of the features of MongoDB, I highly recommend a read through <a href="http://docs.mongodb.org/manual/core/crud-introduction/">the documentation</a> for MongoDB.</p>
    </div>
  </div>

  <h2>MongoDB and Node.js</h2>
  <p>MongoDB runs on its own and acts as a database server that your Node.js application can interact with.  Therefore, in development, you need to run MongoDB in a different tab in your terminal while running your Node.js server.  (usually with the <code>mongod</code> command)</p>
  
  <h2>Incorporating MongoDB in Node.js</h2>
  <p>There are two libraries that you can use to implement MongoDB in Node.js: <a href="https://github.com/mongodb/node-mongodb-native">The MongoDB Native NodeJS Driver</a> and <a href="http://mongoosejs.com/">Mongoose JS driver</a>.</p>
  <p>The key difference is that the native driver mimics interacting directly with the database and does little more, but Mongoose provides an object layer on top of the native driver providing functionality like data validation/complex models (e.g. all "email" fields must be a valid email).</p>
  <p>We will present the MongoDB native driver in this lesson but will cover Mongoose in the next lesson.</p>

  <h2>MongoDB Native Driver</h2>
  <p>Talk aside, here&apos;s some code that uses the native driver</p>

  <h3>package.json</h3>
  <p>First, we need to add mongodb to our libraries that we depend on</p>
  <div class="annotated-code">
    <pre class="prettyprint linenums">
{
  ...
  "dependencies": {
    ...
    "archiver": ">= 0.4.10",
    "mongodb": ">= 1.3.20"
  }
}</pre>
    <div class="annotation" data-line="6">
      Here, we are basically adding that this app depends on mongodb version 1.3.20 or higher.
    </div>
  </div>

  <div class="panel panel-info">
    <div class="panel-heading">
      <h3 class="panel-title">Installing dependencies</h3>
    </div>
    <div class="panel-body">
      <p>In order to install the dependent libraries, run <code>npm install</code> which will download all the required libraries specified in package.json.</p>
    </div>
  </div>

  <h3>settings.js</h3>
  <p>Sometimes, it&apos;s nice to have a file that you can store local settings, e.g. database settings.</p>
  <div class="annotated-code">
    <pre class="prettyprint linenums">
var settings = {};

settings.mongoHost = "127.0.0.1";
settings.mongoPort = 27017;
settings.mongoDb = "myDatabase";

module.exports = settings;</pre>
    <div class="annotation" data-line="3">
      127.0.0.1 = localhost = your local machine
    </div>
    <div class="annotation" data-line="5">
      You can call the database whatever you want.
    </div>
    <div class="annotation" data-line="7">
      By setting module.exports to settings, every time you require('settings.js') it will return the settings object.
    </div>
  </div>
  <div class="panel panel-warning">
    <div class="panel-heading">
      <h3 class="panel-title">Settings Files</h3>
    </div>
    <div class="panel-body">
      <p>Be careful about storing critical information, e.g. API keys/database passwords, in the git repository because they will be publicly available on GitHub.</p>
      <p>Instead, consider putting the settings in a .gitignore&apos;d file so that it is not stored in the repository.</p>
      <p>Also, check out <a href="https://github.com/flatiron/nconf">nconf</a> which may give you the best flexibility by allowing you to have environment variables as well as local files (useful if you use Heroku but do development on your local machine).  See <a href="https://devcenter.heroku.com/articles/config-vars">Heroku config vars</a> for more info.</p>
    </div>
  </div>

  <h3>dinoprovider.js</h3>
  <p>This is a model file that will give you access to the collections in the database</p>
  <div class="annotated-code">
    <pre class="prettyprint linenums">
var mongodb = require('mongodb');
var settings = require('./settings');
var Server = mongodb.Server;
var MongoClient = mongodb.MongoClient;
var mongoClient = new MongoClient(new Server(settings.mongoHost, settings.mongoPort));

var velociraptors, employees;

mongoClient.open(function(err, mongoClient) {
  if (err) throw err;

  var db = mongoClient.db(settings.mongoDb);
  velociraptors = db.collection('velociraptors');
  employees = db.collection('employees');
});

module.exports = {
  getVelociraptorCollection: function() {
    return velociraptors;
  },
  getEmployeeCollection: function() {
    return employees;
  }
};</pre>
    <div class="annotation" data-line="3">
      mongodb is the driver library
    </div>
    <div class="annotation" data-line="5">
      This sets up a MongoClient that can access the database for the given host/port.
    </div>
    <div class="annotation" data-line="9">
      This opens a connection to the database (that remains alive for the duration of the web app) and calls the provided function once it is open.
    </div>
    <div class="annotation" data-line="10">
      The first argument is err, which will be set if an error occurs, and we will simply crash if we get an error establishing a connection.
    </div>
    <div class="annotation" data-line="12">
      This gets the relevant database we want (in this case, myDatabase)
    </div>
    <div class="annotation" data-line="13">
      We now get references to the relevant collections (lists of objects).
    </div>
    <div class="annotation" data-line="18">
      We can export functions that will return the appropriate collection that we can operate on.
    </div>
  </div>
  <h3>routes/velociraptor.js</h3>
  <p>This is where we specify our routes for velociraptors.</p>
  <div class="annotated-code">
    <pre class="prettyprint linenums">
// Provides routes for admin interface
var dinoprovider = require('../dinoprovider');

/*
 * GET /
 */
exports.index = function(req, res, next) {
  var collection = dinoprovider.getVelociraptorCollection();
  collection
    .find({})
    .sort({height: -1})
    .toArray(function(err, pets) {
      if (err) {
        next(err);
        return;
      }

      res.render('petlist', { pets: pets });
    });
};

/*
 * POST /create
 */
exports.create = function(req, res, next) {
  var collection = dinoprovider.getVelociraptorCollection();
  var body = req.body;
  var data = {
    name: body.name,
    height: body.height,
    status: "alive",
    interests: body.interests
  };

  collection.insert(data, {}, function(err, objects) {
    if (err) {
      console.log("Error inserting data: " + err.toString());
      res.send({ success: false, message: "Unable to insert data" });
      return;
    }
    // download entry to files
    res.send({success: true});
  });
};</pre>
    <div class="annotation" data-line="8">
      The collection allows us to list/create/update/delete items from the DB.
    </div>
    <div class="annotation" data-line="10">
      Calling find() creates a query object with which we will query the database. (here we just want everything so we&apos;re not restricting the results)
    </div>
    <div class="annotation" data-line="11">
      We can also sort the results in reverse height.
    </div>
    <div class="annotation" data-line="12">
      When we call toArray(), it will send off the query to the DB and call our function with the results in an array when it finishes.
    </div>
    <div class="annotation" data-line="14">
      next(err) simply passes the error to the next function in our request layers - in this case, the error handling layer.
    </div>
    <div class="annotation" data-line="27">
      req.body will give us the request body parsed for us (e.g. when sent as JSON via AJAX)
    </div>
    <div class="annotation" data-line="35">
      We are inserting data into our velociraptors collection and {} is just a set of options we can optionally provide.
    </div>
    <div class="annotation" data-line="42">
      I&apos;m assuming we&apos;re getting an AJAX request so just sending a simple JSON response.
    </div>
  </div>

  <h2>All Done?</h2>
  <a href="/mongooselesson" class="btn btn-primary">Continue</a>
</div>
