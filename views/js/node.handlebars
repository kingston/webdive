<h2>What is Node?</h2>
<p>Node is a collection of modules that help you do low-level tasks similar to the C++ standard library.  For example, it has modules for file access/processes/TCP requests and of course acting as an HTTP server.</p>
<p>Key points:</p>
<ul>
  <li><strong>Single-Threaded:</strong> It runs everything on a single thread so no need to worry about dead-locks or other random synchronization issues.</li>
  <li><strong>Asynchronous:</strong> It can be single-threaded because long operations are asynchronous, meaning you give any long operation (e.g. read from a file) a callback function to call when it is done.</li>
  <li><strong>Highly Scalable:</strong> Basically, it can handle many simultaneous requests easily because it doesn&apos;t need to create a new thread for each request but rather lets event-based callbacks do the processing.</li>
</ul>
<h2>Simple Node.js Server</h2>

<div class="annotated-code">
  <pre class="prettyprint linenums">
var http = require('http');

http.createServer(function (request, response) {
response.writeHead(200, {'Content-Type': 'text/plain'});
response.end('Hello World\n');
}).listen(3000);

console.log('Server running at http://127.0.0.1:3000/');</pre>
  <div class="annotation" data-line="1">
    Gets the "HTTP" module (think of it like import)
  </div>
  <div class="annotation" data-line="3">
    Creates an HTTP server that will call the function every time a request comes in
  </div>
  <div class="annotation" data-line="5">
    You are writing the raw text back to the browser. (no fancy views or anything)
  </div>
  <div class="annotation" data-line="6">
    Start listening on port 3000
  </div>
  <div class="annotation" data-line="8">
    Note: This logs to the console output of your node website (not your browser)
  </div>
</div>
<div class="panel panel-info">
  <div class="panel-heading">
    <h3 class="panel-title">Try it out</h3>
  </div>
  <div class="panel-body">
    <p>Create a new file e.g. hello.js with the contents from above</p>
    <p>You should be able to run <code>node hello.js</code> and create your own little web server</p>
  </div>
</div>
<div class="panel panel-info">
  <div class="panel-heading">
    <h3 class="panel-title">Pro Tip: nodemon</h3>
  </div>
  <div class="panel-body">
    <p>Annoyed by having to run restart your server everytime you make a change?</p>
    <p>Install nodemon which will restart your server for you:</p>
    <p><code>npm install -g nodemon</code></p>
    <p>Now you can run node with auto-restart by:</p>
    <p><code>nodemon app.js</code></p>
    </div>
  </div>
</div>

<h2>Exporting and requiring</h2>
<p>So what exactly are the requires you see everywhere?</p>
<p>Think of them as the node equivalent of imports in Java/Python.  However, instead of importing it into the global variable space (e.g. import os; os.getpid;), it returns the actual module as an object which you can use like any other.</p>
<h3>Example</h3>
<h4>coolthings/hunters.js</h4>
<div class="annotated-code">
  <pre class="prettyprint linenums">
var huntVelociraptors = function(destination) {
...
};

exports.hunt = huntVelociraptors;</pre>
  <div class="annotation" data-line="5">
    <code>exports</code> is an alias for <code>module.exports</code> and is the object that is returned when you call <code>requires</code> on the file.
  </div>
</div>
<h4>myapp.js</h4>
<div class="annotated-code">
  <pre class="prettyprint linenums">
var velo = require('./coolthings/hunters');

velo.hunt("Jurrasic Park");</pre>
  <div class="annotation" data-line="1">
    Note the "./" for requiring files in your local directory (vs. global ones, like HTTP) and there is also no ".js" suffix.
  </div>
</div>
<div class="panel panel-info">
  <div class="panel-heading">
    <h3 class="panel-title">Learning more about Exports/Requiring</h3>
  </div>
  <div class="panel-body">
    <p>Here&apos;s a <a href='http://stackoverflow.com/questions/5311334/what-is-the-purpose-of-nodejs-module-exports-and-how-do-you-use-it'>StackOverflow answer</a> about how it all works.</p>
  </div>
</div>
<h2>Callbacks</h2>
<p>A key part of node is callbacks, which in effect are a short way of saying, do this and when you&apos;re done, call this function.</p>
<p>A common Node.js pattern is to have a callback function that looks like <code>function (err, ...)</code> where the first argument is any error that occurred (null if no errors occurred) and the remaining arguments for whatever else is required (e.g. database query results)</p>

<h2>Node APIs</h2>
<p>Examples taken from <a href="http://nodejs.org/api/">Node API documentation</a></p>
<h3>File Access</h3>
<div class="annotated-code">
  <pre class="prettyprint linenums">
var fs = require('fs');

fs.unlink('/tmp/hello', function (err) {
  if (err) throw err;
  console.log('successfully deleted /tmp/hello');
});</pre>
  <div class="annotation" data-line="1">
    Note that you have to import the "file system" module into a variable before using it.
  </div>
  <div class="annotation" data-line="3">
    Here&apos;s the callback model that characterizes node. The function will only be called once the unlink operation has completed.
  </div>
</div>
<div class="panel panel-info">
  <div class="panel-heading">
    <h3 class="panel-title">Learning more about APIs</h3>
  </div>
  <div class="panel-body">
    <p>Look through the <a href='http://nodejs.org/api/'>Node API documentation</a> to get a feel of what&apos;s available.</p>
  </div>
</div>
