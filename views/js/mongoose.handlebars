<h2>What is Mongoose?</h2>
<p><a href="http://www.mongoosejs.com/">Mongoose</a> is a layer that sits on the MongoDB native drivers to give you higher-level abstractions for your models, e.g. data validation. If you ever used rails, it&apos;s like the model layer of rails.</p>

<h2>Mongoose in Node.js</h2>
<p>And let&apos;s jump straight in.  Do note that as always, this is just one way of doing it (in this case modelled from the <a href="https://github.com/linnovate/mean/tree/master/">mean.io</a> application, which you should certainly check out).</p>

<div class="panel panel-info">
  <div class="panel-heading">
    <h3 class="panel-title">MongoDB IDs</h3>
  </div>
  <div class="panel-body">
    <p>MongoDB has an additional attribute in each object, <code>_id</code>, which is the unique identifier for each Mongo object and looks something like <code>"507f1f77bcf86cd799439011"</code>.</p>
  </div>
</div>


<h3>package.json</h3>
<p>Start off by requiring it in your node.js package (and don&apos;t forget to run <code>npm install</code> after you&apos;re done)</p>
<div class="annotated-code">
  <pre class="prettyprint linenums">
{
...
"dependencies": {
  ...
  "archiver": ">= 0.4.10",
  "mongoose": "~3.8.7"
}
}</pre>
  <div class="annotation" data-line="6">
    This time we will be requiring mongoose 3.8.*
  </div>
</div>

<h3>app.js</h3>
<div class="annotated-code">
  <pre class="prettyprint linenums">
var dburl = process.env.MONGOHQ_URL || 'mongodb://localhost/myDatabase';
var mongoose = require('mongoose');

// start db connection and require models
var db = mongoose.connect(dburl);

require('models/article.js');
require('models/user.js');

...

// install routes
app.get('/articles', articles.all);
app.post('/articles', articles.create);
app.get('/articles/:articleId', articles.show);
app.put('/articles/:articleId', articles.update);
app.del('/articles/:articleId', articles.destroy);

// Finish with setting up the articleId param
app.param('articleId', articles.article);</pre>
  <div class="annotation" data-line="1">
    Just a hack substiution for a settings file.  MONGOHQ_URL is an environmental variable set by Heroku with the URL for the production database.  (and the || is for giving you a default development URL to myDatabase on localhost if the MONGOHQ_URL isn&apos;t set)
  </div>
  <div class="annotation" data-line="5">
    This starts the connection to the database from the client.
  </div>
  <div class="annotation" data-line="7">
    Require the models to register them with mongoose.
  </div>
  <div class="annotation" data-line="20">
    <a href="http://expressjs.com/api.html#app.param"><code>app.param</code></a> will automatically run all routes with <code>:articleId</code> through the <code>articles.article</code> function (which finds the relevant article for you so you don&apos;t have to do so in each of the controllers).
  </div>
</div>

<h3>models/article.js</h3>
<p>Do note, this is a simplified version of the <a href="https://github.com/linnovate/mean/blob/master/app/models/article.js">full version</a></p>
<div class="annotated-code">
  <pre class="prettyprint linenums">
var mongoose = require('mongoose'),
  Schema = mongoose.Schema;

/**
* Article Schema
*/
var ArticleSchema = new Schema({
  title: String,
  created: {
      type: Date,
      default: Date.now
  },
  content: {
      type: String,
      default: '',
      trim: true
  }
});

mongoose.model('Article', ArticleSchema);</pre>
  <div class="annotation" data-line="7">
    This creates a new schema, a.k.a. model, for a particular object type/collection, which you do by passing an object that defines the attributes of the model.
  </div>
  <div class="annotation" data-line="8">
    A quick way of specifying an attribute called 'title' with the type String.
  </div>
  <div class="annotation" data-line="9">
    The long form way of specifying the attribute and allows you to do more complex things like having a default value of Date.now if not set.
  </div>
  <div class="annotation" data-line="20">
    Here we convert our schema into a model that Mongoose can use (the first argument is the name of the model).
  </div>
</div>

<h3>controllers/articles.js (header)</h3>
<div class="annotated-code">
  <pre class="prettyprint linenums">
/**
* Module dependencies.
*/
var mongoose = require('mongoose'),
  Article = mongoose.model('Article');

/**
* Find article by id
*/
exports.article = function(req, res, next, id) {
  Article.findOne({_id: id})
         .exec(function(err, article) {
      if (err) return next(err);
      if (!article) return next(new Error('Failed to load article ' + id));
      req.article = article;
      next();
  });
};</pre>
  <div class="annotation" data-line="5">
    Get a reference to the Article model.
  </div>
  <div class="annotation" data-line="10">
    This function gets executed before any of the controller functions in the request processing chain if it has <code>:articleId</code> in the route. (see routes/articles.js above)  The 4th argument, <code>id</code>, provides the parameter of the route (<code>:articleId</code>).
  </div>
  <div class="annotation" data-line="11">
    <code>findOne</code> creates a query object to find one object whose _id is id.
  </div>
  <div class="annotation" data-line="12">
    <code>exec</code> executes the query with an appropriate callback.
  </div>
  <div class="annotation" data-line="13">
    next(err) will call the next function in the request processing chain with the error.
  </div>
  <div class="annotation" data-line="15">
    We are setting req.article to the article we got so that it is accessible to all subsequent functions (i.e. our controllers below).
  </div>
  <div class="annotation" data-line="16">
    next() continues the request onto the controller.
  </div>
</div>

<h3>controllers/articles.js (create)</h3>
<div class="annotated-code">
  <pre class="prettyprint linenums">
/**
* Create a article
*/
exports.create = function(req, res) {
  var article = new Article(req.body);

  article.save(function(err) {
      if (err) res.jsonp({success: false});
      else res.jsonp(article);
  });
};</pre>
  <div class="annotation" data-line="5">
    We can create a new article by simply calling <code>new Article</code> with the request body (assuming it is an JSON object with the proper attributes).
  </div>
  <div class="annotation" data-line="7">
    Calling <code>save</code> will insert it into our database.
  </div>
  <div class="annotation" data-line="9">
    We can then access article as any other object (e.g. sending it back as a JSONP response)
  </div>
</div>

<h3>controllers/articles.js (update)</h3>
<div class="annotated-code">
  <pre class="prettyprint linenums">
exports.update = function(req, res) {
  var article = req.article;

  article.title = req.body.title;
  article.content = req.body.content;

  article.save(function(err) {
      if (err) res.jsonp({success: false});
      else res.jsonp(article);
  });
};</pre>
  <div class="annotation" data-line="2">
    Here we can get our article object that we got from the article preprocessing step.
  </div>
  <div class="annotation" data-line="4">
    We update the article object accordingly.
  </div>
  <div class="annotation" data-line="7">
    We can save as before.
  </div>
</div>

<h3>controllers/articles.js (remove)</h3>
<div class="annotated-code">
  <pre class="prettyprint linenums">
exports.destroy = function(req, res) {
  var article = req.article;

  article.remove(function(err) {
      if (err) res.jsonp({success: false});
      else res.jsonp(article);
  });
};</pre>
  <div class="annotation" data-line="4">
    Just call <code>remove</code> on the object.
  </div>
</div>

<h3>controllers/articles.js (show)</h3>
<div class="annotated-code">
  <pre class="prettyprint linenums">
exports.show = function(req, res) {
  res.jsonp(req.article);
};</pre>
</div>

<h3>controllers/articles.js (list)</h3>
<div class="annotated-code">
  <pre class="prettyprint linenums">
exports.all = function(req, res) {
  Article.find().sort('-created').exec(function(err, articles) {
      if (err) {
          res.render('error', {
              status: 500
          });
      } else {
          res.jsonp(articles);
      }
  });
};</pre>
  <div class="annotation" data-line="2">
    Same concept as <code>findOne()</code>, but only this time we create a query for all objects and sort it by created descending.
  </div>
</div>

<div class="panel panel-info">
  <div class="panel-heading">
    <h3 class="panel-title">Mongoose Guide</h3>
  </div>
  <div class="panel-body">
    <p>Read <a href="http://mongoosejs.com/docs/guide.html">this guide</a> before diving into Mongoose as it will explain everything in a lot more depth.</p>
  </div>
</div>
